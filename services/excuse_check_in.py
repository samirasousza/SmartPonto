import datetime
import streamlit as st

def excuse_check_in(card_id, timestamp, date, excuse):
    try:
        nonce = st.w3.eth.get_transaction_count(st.sender_address)
        # Acessa a fun√ß√£o store do contrato inteligente e prepara uma chamada com o par√¢metro num (o n√∫mero que o usu√°rio digitou).
        # Constr√≥i a transa√ß√£o em formato de dicion√°rio Python, com os dados necess√°rios para envi√°-la √† rede Ethereum.
        tx = st.contract.functions.excuseCheckIn(card_id, timestamp, date, excuse).build_transaction({
            'chainId': 11155111,  # Sepolia
            'gas': 200000, #Quantidade m√°xima de g√°s que a transa√ß√£o pode consumir. Fixado em 200000 unidades, o que √© mais do que suficiente para essa fun√ß√£o simples.
            'gasPrice': st.w3.to_wei('10', 'gwei'), #Define o pre√ßo do g√°s a ser pago por unidade. Convertido de 10 gwei para wei (menor unidade do ETH) usando w3.to_wei(...).
            'nonce': nonce #Define o nonce, ou seja, o n√∫mero de transa√ß√µes j√° enviadas pela conta. Garante que cada transa√ß√£o tenha um n√∫mero √∫nico, necess√°rio para ser aceita pela rede.
        })

        signed_tx = st.w3.eth.account.sign_transaction(tx, st.private_key)
        tx_hash = st.w3.eth.send_raw_transaction(signed_tx.raw_transaction)

        st.success(f"‚úÖ Transa√ß√£o enviada com sucesso!\nHash: {tx_hash.hex()}")

        # Espera a transa√ß√£o ser minerada
        receipt = st.w3.eth.wait_for_transaction_receipt(tx_hash)
        print(receipt.logs)
        # L√™ os eventos emitidos na transa√ß√£o
        logs = st.contract.events.Aviso().process_receipt(receipt)

        if logs:
            product_values = logs[0]['args']
            st.info(f"üì° Evento capturado: informa√ß√µes do produto armazenado foi `{product_values}`")
            return True, "Registro realizado!"
        else:
            st.warning("‚ö†Ô∏è Nenhum evento ProductRegistered encontrado na transa√ß√£o.")
            return False, f"Erro ao processar produto"
    except Exception as e:
        st.error(f"Erro ao enviar transa√ß√£o: {str(e)}")
        return False, f"Erro ao processar produto: {str(e)}"